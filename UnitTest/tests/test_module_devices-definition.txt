defmod test_module_devices UnitTest dummyDuino ( 
{
	use Test2::V0;
	use Test2::Tools::Compare qw{is isnt unlike};
	use Data::Dumper;

	## for online testsytem: defmod test_SDUT_devices UnitTest dummyDuino ##
	my $testDataArray; 
	sub loadJson
	{
		my $jsonStr=GetFileFromURL($_[0],4,"",1,4);
		$testDataArray = eval { decode_json($jsonStr) };
		if($@){
			diag("open json file TestData was not possible $?"); 
			diag explain $jsonStr;
		}
				
	}


	use JSON; 
	
	my $jsonSourceUrl = AttrVal($name,"Test_Data_URI","https://raw.githubusercontent.com/RFD-FHEM/SIGNALduino_TOOL/pre_addModule/FHEM/lib/SD_Device_ProtocolList.json");
	loadJson($jsonSourceUrl); 
	#diag  $testDataArray;
	
	while ( (my $pID, my $testSet) = each  (@{$testDataArray}) )
	{
		next if (!lib::SD_Protocols::exists($testSet->{id}));
		next if (lib::SD_Protocols::checkProperty($testSet->{id},'developId',undef));
		next if (!defined($testSet->{module}) );
	
		while ( (my $tID, my $tData) = each (@{$testSet->{data}}) ) 
		{
			#diag explain $tData;
			
			subtest "Checking module: $testSet->{module} device: $testSet->{name} TestNo: $tID " => sub {
				my $plan = 0;
				if (IsDevice($tData->{internals}{NAME}))
				{
					note("device is already defined on system, clearing readings");
					CommandSetReading(undef, "$tData->{internals}{NAME} state missing");
					#CommandDelete(undef,$tData->{internals}{NAME});
				}  else {
					note("device will be defined temporary");
					CommandDefMod(undef,"-temporary $tData->{internals}{NAME} $testSet->{module} ".$tData->{internals}{DEF});			
				}
				
				SIGNALduino_Parse($targetHash, $targetHash, $targetHash->{NAME}, "\002".$tData->{rmsg}."\003");
				subtest "Verify readings" => sub {
					while ( (my $rName, my $rValue) = each (%{$tData->{readings}}) )
					{
						$plan++;
						is(ReadingsVal($tData->{internals}{NAME} ,$rName,"0"),$rValue,"check reading $rName");
					}
				};
				
				subtest "Verify internals" => sub {
				
					while ( (my $iName, my $iValue) = each (%{$tData->{internals}}) )
					{
						$plan++;
						is(InternalVal($tData->{internals}{NAME} ,$iName,"0"),$iValue,"check internal $iName");
					}
				};
				
				plan => $plan;
			}
		}
	}
}
)